### Constraints
### Canonical: https://pip.pypa.io/en/stable/user_guide/#id15

# 
# The link above provides the most common use-cases for constraints. This
# file includes one simple and common example is followed by a relatively
# unusual example, which forces a package to use a specific branch of a
# GitHub fork rather than the PyPi index

## Generally, constraints are used for very simple purposes like bounding
## the version range of a shared dependency of multiple third-party packages
## This is familiar and looks just like requirements.txt:
# pyabc>=1.4.2,<= 1.4.4. 

### More exotic usage of constraints.txt
## If a package has a dependency on the jq package, but a specific fork is
## required, and it isn't hosted in a PyPi index, the following can be used
## as a constraints.txt entry
##
## When pip goes to get the jq package, it consults the constraints before going
## to any indexes that may be configured by the user in pip.ini/pip.conf, such as
## the default PyPi index where most packages come from. Rather than go to the index
## it will determine where to go based on the constraint entry.
##
## This gives an end-user some control over packages that they don't maintain when
## there are broken or "not-quite right" dependencies
## The following is a real-world example required to dynamically build jq.py on a
## platform without a binary wheel available- ppc64le/Linux. Unfortunately, a fork
## and new branch were required as the setuptools setup.py was not meant to build
## the package on the fly as it predated PEP518 and had dependencies on native code
## as well as native code that had to be generated by Cython at build-time
#
# git+https://github.com/mzpqnxow/jq.py@setuptools-build#egg=jq
#

